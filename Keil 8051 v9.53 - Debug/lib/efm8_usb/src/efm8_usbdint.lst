C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8_USBDINT
OBJECT MODULE PLACED IN .\lib\efm8_usb\src\efm8_usbdint.OBJ
COMPILER INVOKED BY: f:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe F:\SiliconLabs\S
                    -implicityStudio\v3\developer\sdks\si8051\v3\Lib\efm8_usb\src\efm8_usbdint.c SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGL
                    -EVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(F:\Projects\H3_Firmware\inc;
                    -F:\Projects\H3_Firmware\inc\config;F:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F326/periphe
                    -ral_driver/inc;F:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Lib/efm8_usb/inc;F:/SiliconLabs/SimplicitySt
                    -udio/v3/developer/sdks/si8051/v3//Lib/efm8_assert;F:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/sh
                    -ared/si8051Base;F:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F326;F:/SiliconLabs/SimplicityS
                    -tudio/v3/developer/sdks/si8051/v3//Device/C8051F326/inc) PRINT(.\lib\efm8_usb\src\efm8_usbdint.lst) COND PAGEWIDTH(120) 
                    -PAGELENGTH(65) OBJECT(.\lib\efm8_usb\src\efm8_usbdint.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "si_toolchain.h"
   8          #include "efm8_usb.h"
   9          #include <stdint.h>
  10          #include <endian.h>
  11          
  12          // -----------------------------------------------------------------------------
  13          // Global variables
  14          
  15          extern SI_SEGMENT_VARIABLE(myUsbDevice, USBD_Device_TypeDef, MEM_MODEL_SEG);
  16          extern SI_SEGMENT_VARIABLE(txZero[2], uint8_t, SI_SEG_CODE);
  17          
  18          // -----------------------------------------------------------------------------
  19          // Function prototypes
  20          
  21          static void handleUsbEp0Int(void);
  22          static void handleUsbResetInt(void);
  23          static void handleUsbSuspendInt(void);
  24          static void handleUsbResumeInt(void);
  25          static void handleUsbEp0Tx(void);
  26          static void handleUsbEp0Rx(void);
  27          static void USB_ReadFIFOSetup(void);
  28          
  29          #if (SLAB_USB_EP1IN_USED)
  30          void handleUsbIn1Int(void);
  31          #endif // SLAB_USB_EP1IN_USED
  32          #if (SLAB_USB_EP2IN_USED)
              void handleUsbIn2Int(void);
              #endif // SLAB_USB_EP2IN_USED
  35          #if (SLAB_USB_EP3IN_USED)
              void handleUsbIn3Int(void);
              #endif // SLAB_USB_EP3IN_USED
  38          
  39          #if (SLAB_USB_EP1OUT_USED)
              void handleUsbOut1Int(void);
              #endif // SLAB_USB_EP1OUT_USED
  42          #if (SLAB_USB_EP2OUT_USED)
              void handleUsbOut2Int(void);
              #endif // SLAB_USB_EP2OUT_USED
  45          #if (SLAB_USB_EP3OUT_USED)
              void handleUsbOut3Int(void);
              #endif // SLAB_USB_EP3OUT_USED
  48          
C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 2   

  49          void SendEp0Stall(void);
  50          
  51          // -----------------------------------------------------------------------------
  52          // Functions
  53          
  54          /***************************************************************************//**
  55           * @brief       First-level handler for USB peripheral interrupt
  56           * @details     If @ref SLAB_USB_POLLED_MODE is 1, this becomes a regular
  57           *              function instead of an ISR and must be called by the application
  58           *              periodically.
  59           ******************************************************************************/
  60          #if (SLAB_USB_POLLED_MODE == 0)
  61          SI_INTERRUPT(usbIrqHandler, USB0_IRQn)
  62          #else
              void usbIrqHandler(void)
              #endif
  65          {
  66   1        uint8_t statusCommon, statusIn, statusOut, indexSave;
  67   1      
  68   1      #if SLAB_USB_HANDLER_CB
                // Callback to user before processing
                USBD_EnterHandler();
              #endif
  72   1      
  73   1        // Get the interrupt sources
  74   1        statusCommon = USB_GetCommonInts();
  75   1        statusIn = USB_GetInInts();
  76   1        statusOut = USB_GetOutInts();
  77   1      
  78   1      #if SLAB_USB_POLLED_MODE
                if ((statusCommon == 0) && (statusIn == 0) && (statusOut == 0))
                {
                  return;
                }
              #endif
  84   1      
  85   1        // Save the current index
  86   1        indexSave = USB_GetIndex();
  87   1      
  88   1        // Check Common USB Interrupts
  89   1        if (USB_IsSofIntActive(statusCommon))
  90   1        {
  91   2      #if SLAB_USB_SOF_CB
  92   2          USBD_SofCb(USB_GetSofNumber());
  93   2      #endif // SLAB_USB_SOF_CB
  94   2      
  95   2          // Check for unhandled USB packets on EP0 and set the corresponding IN or
  96   2          // OUT interrupt active flag if necessary.
  97   2          if (((myUsbDevice.ep0.misc.bits.outPacketPending == true) && (myUsbDevice.ep0.state == D_EP_RECEIVING)
             -) ||
  98   2              ((myUsbDevice.ep0.misc.bits.inPacketPending == true) && (myUsbDevice.ep0.state == D_EP_TRANSMITTIN
             -G)))
  99   2          {
 100   3            USB_SetEp0IntActive(statusIn);
 101   3          }
 102   2          // Check for unhandled USB OUT packets and set the corresponding OUT
 103   2          // interrupt active flag if necessary.
 104   2      #if SLAB_USB_EP1OUT_USED
                  if ((myUsbDevice.ep1out.misc.bits.outPacketPending == true) && (myUsbDevice.ep1out.state == D_EP_RECEI
             -VING))
                  {
                    USB_SetOut1IntActive(statusOut);
                  }
C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 3   

              #endif
 110   2      #if SLAB_USB_EP2OUT_USED
                  if ((myUsbDevice.ep2out.misc.bits.outPacketPending == true) && (myUsbDevice.ep2out.state == D_EP_RECEI
             -VING))
                  {
                    USB_SetOut2IntActive(statusOut);
                  }
              #endif
 116   2      #if SLAB_USB_EP3OUT_USED
                  if ((myUsbDevice.ep3out.misc.bits.outPacketPending == true) && (myUsbDevice.ep3out.state == D_EP_RECEI
             -VING))
                  {
                    USB_SetOut3IntActive(statusOut);
                  }
              #endif
 122   2      #if (SLAB_USB_EP3IN_USED && (SLAB_USB_EP3IN_TRANSFER_TYPE == USB_EPTYPE_ISOC))
                  if ((myUsbDevice.ep3in.misc.bits.inPacketPending == true) && (myUsbDevice.ep3in.state == D_EP_TRANSMIT
             -TING))
                  {
                    USB_SetIn3IntActive(statusIn);
                  }
              #endif
 128   2        }
 129   1      
 130   1        if (USB_IsResetIntActive(statusCommon))
 131   1        {
 132   2          handleUsbResetInt();
 133   2      
 134   2          // If VBUS is not present on detection of a USB reset, enter suspend mode.
 135   2      #if (SLAB_USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF)
 136   2          if (USB_IsVbusOn() == false)
 137   2          {
 138   3            USB_SetSuspendIntActive(statusCommon);
 139   3          }
 140   2      #endif
 141   2        }
 142   1      
 143   1        if (USB_IsResumeIntActive(statusCommon))
 144   1        {
 145   2          handleUsbResumeInt();
 146   2        }
 147   1      
 148   1        if (USB_IsSuspendIntActive(statusCommon))
 149   1        {
 150   2          handleUsbSuspendInt();
 151   2        }
 152   1      
 153   1      #if SLAB_USB_EP3IN_USED
                if (USB_IsIn3IntActive(statusIn))
                {
                  handleUsbIn3Int();
                }
              #endif  // EP3IN_USED
 159   1      
 160   1      #if SLAB_USB_EP3OUT_USED
                if (USB_IsOut3IntActive(statusOut))
                {
                  handleUsbOut3Int();
                }
              #endif  // EP3OUT_USED
 166   1      
 167   1      #if SLAB_USB_EP2IN_USED
                if (USB_IsIn2IntActive(statusIn))
C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 4   

                {
                  handleUsbIn2Int();
                }
              #endif  // EP2IN_USED
 173   1      
 174   1      #if SLAB_USB_EP1IN_USED
 175   1        if (USB_IsIn1IntActive(statusIn))
 176   1        {
 177   2          handleUsbIn1Int();
 178   2        }
 179   1      #endif  // EP1IN_USED
 180   1      
 181   1      #if SLAB_USB_EP2OUT_USED
                if (USB_IsOut2IntActive(statusOut))
                {
                  handleUsbOut2Int();
                }
              #endif  // EP2OUT_USED
 187   1      
 188   1      #if SLAB_USB_EP1OUT_USED
                if (USB_IsOut1IntActive(statusOut))
                {
                  handleUsbOut1Int();
                }
              #endif  // EP1OUT_USED
 194   1      
 195   1        // Check USB Endpoint 0 Interrupt
 196   1        if (USB_IsEp0IntActive(statusIn))
 197   1        {
 198   2          handleUsbEp0Int();
 199   2        }
 200   1      
 201   1        // Restore index
 202   1        USB_SetIndex(indexSave);
 203   1      
 204   1      #if SLAB_USB_HANDLER_CB
                // Callback to user before exiting
                USBD_ExitHandler();
              #endif
 208   1      }
 209          
 210          /***************************************************************************//**
 211           * @brief       Handles Endpoint 0 transfer interrupt
 212           ******************************************************************************/
 213          static void handleUsbEp0Int(void)
 214          {
 215   1        USB_SetIndex(0);
 216   1      
 217   1        if (USB_Ep0SentStall() || USB_GetSetupEnd())
 218   1        {
 219   2          USB_Ep0ClearSentStall();
 220   2          USB_ServicedSetupEnd();
 221   2          myUsbDevice.ep0.state = D_EP_IDLE;
 222   2          myUsbDevice.ep0.misc.c = 0;
 223   2        }
 224   1        if (USB_Ep0OutPacketReady())
 225   1        {
 226   2          if (myUsbDevice.ep0.misc.bits.waitForRead == true)
 227   2          {
 228   3            myUsbDevice.ep0.misc.bits.outPacketPending = true;
 229   3          }
 230   2          else if (myUsbDevice.ep0.state == D_EP_IDLE)
 231   2          {
C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 5   

 232   3            myUsbDevice.ep0String.c = USB_STRING_DESCRIPTOR_UTF16LE;
 233   3            USB_ReadFIFOSetup();
 234   3      
 235   3            // Vendor unique, Class or Standard setup commands override?
 236   3      #if SLAB_USB_SETUP_CMD_CB
 237   3            if (USBD_SetupCmdCb(&myUsbDevice.setup) == USB_STATUS_REQ_UNHANDLED)
 238   3            {
 239   4      #endif
 240   4            if (myUsbDevice.setup.bmRequestType.Type == USB_SETUP_TYPE_STANDARD)
 241   4            {
 242   5              USBDCH9_SetupCmd();
 243   5            }
 244   4            else
 245   4            {
 246   5              SendEp0Stall();
 247   5            }
 248   4      #if SLAB_USB_SETUP_CMD_CB
 249   4          }
 250   3          else
 251   3          {
 252   4            // If in-packet but callback didn't setup a USBD_Read and we are expecting a data byte then
 253   4            // we need to wait for the read to be setup and nack packets till USBD_Read is called.
 254   4            if ((myUsbDevice.setup.bmRequestType.Direction == USB_SETUP_DIR_OUT)
 255   4                && (myUsbDevice.ep0.state != D_EP_RECEIVING)
 256   4                && (myUsbDevice.setup.wLength)
 257   4                )
 258   4            {
 259   5              myUsbDevice.ep0.misc.bits.waitForRead = true;
 260   5            }
 261   4          }
 262   3      #endif
 263   3          }
 264   2          else if (myUsbDevice.ep0.state == D_EP_RECEIVING)
 265   2          {
 266   3            handleUsbEp0Rx();
 267   3          }
 268   2          else
 269   2          {
 270   3            myUsbDevice.ep0.misc.bits.outPacketPending = true;
 271   3          }
 272   2        }
 273   1        if ((myUsbDevice.ep0.state == D_EP_TRANSMITTING) && (USB_Ep0InPacketReady() == 0))
 274   1        {
 275   2          handleUsbEp0Tx();
 276   2        }
 277   1      }
 278          
 279          /***************************************************************************//**
 280           * @brief       Reads and formats a setup packet
 281           ******************************************************************************/
 282          static void USB_ReadFIFOSetup(void)
 283          {
 284   1        uint16_t MEM_MODEL_SEG *ptr = &myUsbDevice.setup;
 285   1      
 286   1        USB_ReadFIFO(0, 8, (uint8_t *)ptr);
 287   1      
 288   1        USB_Ep0ServicedOutPacketReady();
 289   1      
 290   1        // Modify for Endian-ness of the compiler
 291   1        ptr[1] = le16toh(ptr[1]);
 292   1        ptr[2] = le16toh(ptr[2]);
 293   1        ptr[3] = le16toh(ptr[3]);
 294   1      }
C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 6   

 295          
 296          /***************************************************************************//**
 297           * @brief       Handles USB port reset interrupt
 298           * @details     After receiving a USB reset, halt all endpoints except for
 299           *              Endpoint 0, set the device state, and configure USB hardware.
 300           ******************************************************************************/
 301          static void handleUsbResetInt(void)
 302          {
 303   1        // Setup EP0 to receive SETUP packets
 304   1        myUsbDevice.ep0.state = D_EP_IDLE;
 305   1      
 306   1        // Halt all other endpoints
 307   1      #if SLAB_USB_EP1IN_USED
 308   1        myUsbDevice.ep1in.state = D_EP_HALT;
 309   1      #endif
 310   1      #if SLAB_USB_EP2IN_USED
                myUsbDevice.ep2in.state = D_EP_HALT;
              #endif
 313   1      #if SLAB_USB_EP3IN_USED
                myUsbDevice.ep3in.state = D_EP_HALT;
              #endif
 316   1      #if SLAB_USB_EP1OUT_USED
                myUsbDevice.ep1out.state = D_EP_HALT;
              #endif
 319   1      #if SLAB_USB_EP2OUT_USED
                myUsbDevice.ep2out.state = D_EP_HALT;
              #endif
 322   1      #if SLAB_USB_EP3OUT_USED
                myUsbDevice.ep3out.state = D_EP_HALT;
              #endif
 325   1      
 326   1        // After a USB reset, some USB hardware configurations will be reset and must
 327   1        // be reconfigured.
 328   1      
 329   1        // Re-enable clock recovery
 330   1      #if SLAB_USB_CLOCK_RECOVERY_ENABLED
 331   1      #if SLAB_USB_FULL_SPEED
 332   1        USB_EnableFullSpeedClockRecovery();
 333   1      #else
                USB_EnableLowSpeedClockRecovery();
              #endif
 336   1      #endif
 337   1      
 338   1        // Re-enable USB interrupts
 339   1        USB_EnableSuspendDetection();
 340   1        USB_EnableDeviceInts();
 341   1      
 342   1        // If VBUS is preset, put the device in the Default state.
 343   1        // Otherwise, put it in the Attached state.
 344   1      #if (!(SLAB_USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF))
                if (USB_IsVbusOn())
                {
                  USBD_SetUsbState(USBD_STATE_DEFAULT);
                }
                else
                {
                  USBD_SetUsbState(USBD_STATE_ATTACHED);
                }
              #else
 354   1        USBD_SetUsbState(USBD_STATE_DEFAULT);
 355   1      #endif  // (!(SLAB_USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF))
 356   1      
 357   1      #if SLAB_USB_RESET_CB
C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 7   

 358   1        // Make the USB Reset Callback
 359   1        USBD_ResetCb();
 360   1      #endif
 361   1      }
 362          
 363          /***************************************************************************//**
 364           * @brief       Handle USB port suspend interrupt
 365           * @details     After receiving a USB reset, set the device state and
 366           *              call @ref USBD_Suspend() if configured to do so in
 367           *              @ref SLAB_USB_PWRSAVE_MODE
 368           ******************************************************************************/
 369          static void handleUsbSuspendInt(void)
 370          {
 371   1        if (myUsbDevice.state >= USBD_STATE_POWERED)
 372   1        {
 373   2          USBD_SetUsbState(USBD_STATE_SUSPENDED);
 374   2      
 375   2      #if (SLAB_USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONSUSPEND)
 376   2          USBD_Suspend();
 377   2      #endif
 378   2        }
 379   1      }
 380          
 381          /***************************************************************************//**
 382           * @brief       Handles USB port resume interrupt
 383           * @details     Restore the device state to its previous value.
 384           ******************************************************************************/
 385          static void handleUsbResumeInt(void)
 386          {
 387   1        USBD_SetUsbState(myUsbDevice.savedState);
 388   1      }
 389          
 390          /***************************************************************************//**
 391           * @brief       Handles transmit data phase on Endpoint 0
 392           ******************************************************************************/
 393          static void handleUsbEp0Tx(void)
 394          {
 395   1        uint8_t count, count_snapshot, i;
 396   1        bool callback = myUsbDevice.ep0.misc.bits.callback;
 397   1      
 398   1        // The number of bytes to send in the next packet must be less than or equal
 399   1        // to the maximum EP0 packet size.
 400   1        count = (myUsbDevice.ep0.remaining >= USB_EP0_SIZE) ?
 401   1                 USB_EP0_SIZE : myUsbDevice.ep0.remaining;
 402   1      
 403   1        // Save the packet size for future use.
 404   1        count_snapshot = count;
 405   1      
 406   1        // Strings can use the USB_STRING_DESCRIPTOR_UTF16LE_PACKED type to pack
 407   1        // UTF16LE data without the zero's between each character.
 408   1        // If the current string is of type USB_STRING_DESCRIPTOR_UTF16LE_PACKED,
 409   1        // unpacket it by inserting a zero between each character in the string.
 410   1        if (myUsbDevice.ep0String.encoding.type == USB_STRING_DESCRIPTOR_UTF16LE_PACKED)
 411   1        {
 412   2          // If ep0String.encoding.init is true, this is the beginning of the string.
 413   2          // The first two bytes of the string are the bLength and bDescriptorType
 414   2          // fields. These are no packed like the reset of the string, so write them
 415   2          // to the FIFO and set ep0String.encoding.init to false.
 416   2          if (myUsbDevice.ep0String.encoding.init == true)
 417   2          {
 418   3            USB_WriteFIFO(0, 2, myUsbDevice.ep0.buf, false);
 419   3            myUsbDevice.ep0.buf += 2;
 420   3            count -= 2;
C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 8   

 421   3            myUsbDevice.ep0String.encoding.init = false;
 422   3          }
 423   2      
 424   2          // Insert a 0x00 between each character of the string.
 425   2          for (i = 0; i < count / 2; i++)
 426   2          {
 427   3            USB_WriteFIFO(0, 1, myUsbDevice.ep0.buf, false);
 428   3            myUsbDevice.ep0.buf++;
 429   3            USB_WriteFIFO(0, 1, &txZero, false);
 430   3          }
 431   2        }
 432   1        // For any data other than USB_STRING_DESCRIPTOR_UTF16LE_PACKED, just send the
 433   1        // data normally.
 434   1        else
 435   1        {
 436   2          USB_WriteFIFO(0, count, myUsbDevice.ep0.buf, false);
 437   2          myUsbDevice.ep0.buf += count;
 438   2        }
 439   1      
 440   1        myUsbDevice.ep0.misc.bits.inPacketPending = false;
 441   1        myUsbDevice.ep0.remaining -= count_snapshot;
 442   1      
 443   1        // If the last packet of the transfer is exactly the maximum EP0 packet size,
 444   1        // we will have to send a ZLP (zero-length packet) after the last data packet
 445   1        // to signal to the host that the transfer is complete.
 446   1        // Check for the ZLP packet case here.
 447   1        if ((myUsbDevice.ep0.remaining == 0) && (count_snapshot != USB_EP0_SIZE))
 448   1        {
 449   2          USB_Ep0SetLastInPacketReady();
 450   2          myUsbDevice.ep0.state = D_EP_IDLE;
 451   2          myUsbDevice.ep0String.c = USB_STRING_DESCRIPTOR_UTF16LE;
 452   2          myUsbDevice.ep0.misc.c = 0;
 453   2        }
 454   1        else
 455   1        {
 456   2          // Do not call USB_Ep0SetLastInPacketReady() because we still need to send
 457   2          // the ZLP.
 458   2          USB_Ep0SetInPacketReady();
 459   2        }
 460   1        // Make callback if requested
 461   1        if (callback == true)
 462   1        {
 463   2          USBD_XferCompleteCb(EP0, USB_STATUS_OK, count_snapshot, myUsbDevice.ep0.remaining);
 464   2        }
 465   1      }
 466          
 467          /***************************************************************************//**
 468           * @brief       Handles receive data phase on Endpoint 0
 469           ******************************************************************************/
 470          void handleUsbEp0Rx(void)
 471          {
 472   1        uint8_t count;
 473   1        USB_Status_TypeDef status;
 474   1        bool callback = myUsbDevice.ep0.misc.bits.callback;
 475   1      
 476   1        // Get the number of bytes received
 477   1        count = USB_Ep0GetCount();
 478   1      
 479   1        // If the call to USBD_Read() did not give a large enough buffer to hold this
 480   1        // data, set the outPacketPending flag and signal an RX overrun.
 481   1        if (myUsbDevice.ep0.remaining < count)
 482   1        {
 483   2          myUsbDevice.ep0.state = D_EP_IDLE;
C51 COMPILER V9.53.0.0   EFM8_USBDINT                                                      01/23/2016 15:52:27 PAGE 9   

 484   2          myUsbDevice.ep0.misc.bits.outPacketPending = true;
 485   2          status = USB_STATUS_EP_RX_BUFFER_OVERRUN;
 486   2        }
 487   1        else
 488   1        {
 489   2          USB_ReadFIFO(0, count, myUsbDevice.ep0.buf);
 490   2          myUsbDevice.ep0.buf += count;
 491   2          myUsbDevice.ep0.remaining -= count;
 492   2          status = USB_STATUS_OK;
 493   2      
 494   2          // If the last packet of the transfer is exactly the maximum EP0 packet
 495   2          // size, we will must wait to receive a ZLP (zero-length packet) after the
 496   2          // last data packet. This signals that the host has completed the transfer.
 497   2          // Check for the ZLP packet case here.
 498   2          if ((myUsbDevice.ep0.remaining == 0) && (count != USB_EP0_SIZE))
 499   2          {
 500   3            USB_Ep0SetLastOutPacketReady();
 501   3            myUsbDevice.ep0.state = D_EP_IDLE;
 502   3            myUsbDevice.ep0.misc.bits.callback = false;
 503   3          }
 504   2          else
 505   2          {
 506   3            // Do not call USB_Ep0SetLastOutPacketReady() until we get the ZLP.
 507   3            USB_Ep0ServicedOutPacketReady();
 508   3          }
 509   2        }
 510   1      
 511   1        // Make callback if requested
 512   1        if (callback == true)
 513   1        {
 514   2          USBD_XferCompleteCb(EP0, status, count, myUsbDevice.ep0.remaining);
 515   2        }
 516   1      }
 517          
 518          
 519          /***************************************************************************//**
 520           * @brief       Send a procedural stall on Endpoint 0
 521           ******************************************************************************/
 522          void SendEp0Stall(void)
 523          {
 524   1        USB_SetIndex(0);
 525   1        myUsbDevice.ep0.state = D_EP_STALL;
 526   1        USB_Ep0SendStall();
 527   1      }
 528          
 529          // This function is called from USBD_Init(). It forces the user project to pull
 530          // this module from the library so that the declared ISR can be seen and
 531          // included. If this is not done then this entire module by never be included
 532          // and the ISR will not be present.
 533          void forceModuleLoad_usbint(void){}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    935    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
