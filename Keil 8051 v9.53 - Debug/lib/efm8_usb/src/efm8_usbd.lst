C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8_USBD
OBJECT MODULE PLACED IN .\lib\efm8_usb\src\efm8_usbd.OBJ
COMPILER INVOKED BY: f:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe F:\SiliconLabs\S
                    -implicityStudio\v3\developer\sdks\si8051\v3\Lib\efm8_usb\src\efm8_usbd.c SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVE
                    -L(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(F:\Projects\H3_Firmware\inc;F:\
                    -Projects\H3_Firmware\inc\config;F:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F326/peripheral
                    -_driver/inc;F:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Lib/efm8_usb/inc;F:/SiliconLabs/SimplicityStudi
                    -o/v3/developer/sdks/si8051/v3//Lib/efm8_assert;F:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/share
                    -d/si8051Base;F:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F326;F:/SiliconLabs/SimplicityStud
                    -io/v3/developer/sdks/si8051/v3//Device/C8051F326/inc) PRINT(.\lib\efm8_usb\src\efm8_usbd.lst) COND PAGEWIDTH(120) PAGELE
                    -NGTH(65) OBJECT(.\lib\efm8_usb\src\efm8_usbd.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "si_toolchain.h"
   8          #include "efm8_usb.h"
   9          #include "assert.h"
  10          #include <stdint.h>
  11          
  12          // -----------------------------------------------------------------------------
  13          // Global Variables
  14          
  15          /// Tracks the state of the USB device and endpoints and contains pointers
  16          /// to all descriptors.
  17          SI_SEGMENT_VARIABLE(myUsbDevice, USBD_Device_TypeDef, MEM_MODEL_SEG);
  18          
  19          // -----------------------------------------------------------------------------
  20          // Macros
  21          
  22          /// Returns the requested endpoint object of type USBD_Ep_TypeDef
  23          /// This macro does not check that epAddr is valid, so the calling function
  24          /// should verify epAddr before using the macro.
  25          #define GetEp(epAddr)  (&myUsbDevice.ep0 + epAddr)
  26          
  27          
  28          #if SLAB_USB_POLLED_MODE
              #define DISABLE_USB_INTS  {}
              #define ENABLE_USB_INTS   {}
              
              #else
  33          /// Saves the current state of the USB Interrupt Enable to a variable called
  34          /// usbIntsEnabled, then disables USB interrupts.
  35          #define DISABLE_USB_INTS  { usbIntsEnabled = USB_GetIntsEnabled(); USB_DisableInts(); }
  36          
  37          /// Sets the USB Interrupt Enable bit to the value of usbIntsEnabled.
  38          /// @ref DISABLE_USB_INTS must be used before this macro is used.
  39          #define ENABLE_USB_INTS   { if (usbIntsEnabled) {USB_EnableInts(); } }
  40          #endif  // SLAB_USB_POLLED_MODE
  41          
  42          // Function in efm8_usbdint.c to force load the module for libraries
  43          extern void forceModuleLoad_usbint(void);
  44          
  45          // -----------------------------------------------------------------------------
  46          // USB API Functions
  47          
  48          void USBD_AbortAllTransfers(void)
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 2   

  49          {
  50   1        uint8_t i;
  51   1        bool usbIntsEnabled;
  52   1      
  53   1        USB_SaveSfrPage();
  54   1        DISABLE_USB_INTS;
  55   1      
  56   1        // Call USBD_AbortTransfer() for each endpoint
  57   1        for (i = 1; i < SLAB_USB_NUM_EPS_USED; i++)
  58   1        {
  59   2          USBD_AbortTransfer(i);
  60   2        }
  61   1      
  62   1        ENABLE_USB_INTS;
  63   1        USB_RestoreSfrPage();
  64   1      }
  65          
  66          int8_t USBD_AbortTransfer(uint8_t epAddr)
  67          {
  68   1        USBD_Ep_TypeDef MEM_MODEL_SEG *ep;
  69   1        uint8_t retVal = USB_STATUS_OK;
  70   1        bool usbIntsEnabled;
  71   1      
  72   1        USB_SaveSfrPage();
  73   1      
  74   1        // Verify this is a valid endpoint address and is not Endpoint 0.
  75   1        if ((epAddr == EP0) || (epAddr >= SLAB_USB_NUM_EPS_USED))
  76   1        {
  77   2          SLAB_ASSERT(false);
  78   2          retVal = USB_STATUS_ILLEGAL;
  79   2        }
  80   1        else
  81   1        {
  82   2          DISABLE_USB_INTS;
  83   2          ep = GetEp(epAddr);
  84   2      
  85   2          // If the state of the endpoint is already idle, there is not need to abort
  86   2          // a transfer
  87   2          if (ep->state != D_EP_IDLE)
  88   2          {
  89   3            switch (epAddr)
  90   3            {
  91   4        #if SLAB_USB_EP1IN_USED
  92   4              case EP1IN:
  93   4                USB_AbortInEp(1);
  94   4                break;
  95   4        #endif
  96   4        #if SLAB_USB_EP2IN_USED
                      case EP2IN:
                        USB_AbortInEp(2);
                        break;
                #endif
 101   4        #if SLAB_USB_EP3IN_USED
                      case EP3IN:
                        USB_AbortInEp(3);
                        break;
                #endif
 106   4        #if SLAB_USB_EP1OUT_USED
                      case EP1OUT:
                        USB_AbortOutEp(1);
                        break;
                #endif
 111   4        #if SLAB_USB_EP2OUT_USED
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 3   

                      case EP2OUT:
                        USB_AbortOutEp(2);
                        break;
                #endif
 116   4        #if SLAB_USB_EP3OUT_USED
                      case EP3OUT:
                        USB_AbortOutEp(3);
                        break;
                #endif
 121   4            }
 122   3      
 123   3            // Set the endpoint state to idle and clear out endpoint state variables
 124   3            ep->state = D_EP_IDLE;
 125   3            ep->misc.c = 0;
 126   3          }
 127   2        }
 128   1      
 129   1        ENABLE_USB_INTS;
 130   1        USB_RestoreSfrPage();
 131   1      
 132   1        return retVal;
 133   1      }
 134          
 135          void USBD_Connect(void)
 136          {
 137   1        USB_SaveSfrPage();
 138   1        myUsbDevice.ep0.state = D_EP_IDLE;
 139   1        USB_EnablePullUpResistor();
 140   1        USB_EnableTransceiver();
 141   1        USB_RestoreSfrPage();
 142   1      }
 143          
 144          void USBD_Disconnect(void)
 145          {
 146   1        USB_SaveSfrPage();
 147   1        USB_DisablePullUpResistor();
 148   1        USB_RestoreSfrPage();
 149   1      }
 150          
 151          bool USBD_EpIsBusy(uint8_t epAddr)
 152          {
 153   1        USBD_Ep_TypeDef MEM_MODEL_SEG *ep;
 154   1      
 155   1        // Verify this is a valid endpoint address
 156   1        if (epAddr >= SLAB_USB_NUM_EPS_USED)
 157   1        {
 158   2          SLAB_ASSERT(false);
 159   2          return true;
 160   2        }
 161   1      
 162   1        ep = GetEp(epAddr);
 163   1      
 164   1        if (ep->state == D_EP_IDLE)
 165   1        {
 166   2          return false;
 167   2        }
 168   1      
 169   1        return true;
 170   1      }
 171          
 172          USBD_State_TypeDef USBD_GetUsbState(void)
 173          {
 174   1        return myUsbDevice.state;
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 4   

 175   1      }
 176          
 177          int8_t USBD_Init(const USBD_Init_TypeDef *p)
 178          {
 179   1        uint8_t i;
 180   1      
 181   1        USB_SaveSfrPage();
 182   1        USB_DisableInts();
 183   1      
 184   1        // This forces the liner to bring in the contents efm8_usbdint
 185   1        // It is place here since all users MUST call this function
 186   1        // for the library to work properly
 187   1        forceModuleLoad_usbint();
 188   1      
 189   1      
 190   1        // Zero out the myUsbDevice struct, then initialize all non-zero members
 191   1        for (i = 0; i < sizeof(myUsbDevice); i++)
 192   1        {
 193   2          *((uint8_t MEM_MODEL_SEG *)&myUsbDevice + i) = 0;
 194   2        }
 195   1      
 196   1        // Get the USB descriptors from p
 197   1        myUsbDevice.deviceDescriptor = p->deviceDescriptor;
 198   1        myUsbDevice.configDescriptor = (USB_ConfigurationDescriptor_TypeDef *)p->configDescriptor;
 199   1        myUsbDevice.stringDescriptors = p->stringDescriptors;
 200   1        myUsbDevice.numberOfStrings = p->numberOfStrings;
 201   1      
 202   1        // Enable USB clock
 203   1      #if SLAB_USB_FULL_SPEED
 204   1        USB_SetClockIntOsc();
 205   1        USB_SelectFullSpeed();
 206   1      #else
                USB_SetClockIntOscDiv8();
                USB_SelectLowSpeed();
              #endif // SLAB_USB_FULL_SPEED
 210   1      
 211   1        // Enable or disable VBUS detection
 212   1      #if SLAB_USB_BUS_POWERED
                USB_VbusDetectDisable();
              #else
 215   1        USB_VbusDetectEnable();
 216   1      #endif
 217   1      
 218   1        USB_ForceReset();
 219   1        USB_EnableDeviceInts();
 220   1        USBD_Connect();
 221   1      
 222   1        // If VBUS is present, the state should be Default.
 223   1        // Otherwise, it is Attached.
 224   1      #if SLAB_USB_BUS_POWERED
                myUsbDevice.state = USBD_STATE_DEFAULT;
              #else
 227   1        if (USB_IsVbusOn())
 228   1        {
 229   2          myUsbDevice.state = USBD_STATE_DEFAULT;
 230   2        }
 231   1        else
 232   1        {
 233   2          myUsbDevice.state = USBD_STATE_ATTACHED;
 234   2        }
 235   1      #endif
 236   1      
 237   1        // Only enable USB interrupts when not in polled mode
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 5   

 238   1      #if (SLAB_USB_POLLED_MODE == 0)
 239   1        USB_EnableInts();
 240   1      #endif
 241   1      
 242   1        USB_RestoreSfrPage();
 243   1        USB_DisableInhibit();
 244   1      
 245   1        return USB_STATUS_OK;
 246   1      }
 247          
 248          int8_t USBD_Read(uint8_t epAddr,
 249                           uint8_t *dat,
 250                           uint16_t byteCount,
 251                           bool callback)
 252          {
 253   1        bool usbIntsEnabled;
 254   1        USBD_Ep_TypeDef MEM_MODEL_SEG *ep;
 255   1      
 256   1        USB_SaveSfrPage();
 257   1      
 258   1        // Verify the endpoint address is valid.
 259   1        switch (epAddr)
 260   1        {
 261   2          case EP0:
 262   2      #if SLAB_USB_EP1OUT_USED
                  case EP1OUT:
              #endif
 265   2      #if SLAB_USB_EP2OUT_USED
                  case EP2OUT:
              #endif
 268   2      #if SLAB_USB_EP3OUT_USED
                  case EP3OUT:
              #endif
 271   2            break;
 272   2      #if SLAB_USB_EP1IN_USED
 273   2          case EP1IN:
 274   2      #endif
 275   2      #if SLAB_USB_EP2IN_USED
                  case EP2IN:
              #endif
 278   2      #if SLAB_USB_EP3IN_USED
                  case EP3IN:
              #endif
 281   2          default:
 282   2            SLAB_ASSERT(false);
 283   2            return USB_STATUS_ILLEGAL;
 284   2        }
 285   1      
 286   1        // If the device has not been configured, we cannot start a transfer.
 287   1        if ((epAddr != EP0) && (myUsbDevice.state != USBD_STATE_CONFIGURED))
 288   1        {
 289   2          return USB_STATUS_DEVICE_UNCONFIGURED;
 290   2        }
 291   1      
 292   1        ep = GetEp(epAddr);
 293   1      
 294   1        // If the endpoint is not idle, we cannot start a new transfer.
 295   1        // Return the appropriate error code.
 296   1        if (ep->state != D_EP_IDLE)
 297   1        {
 298   2          if (ep->state == D_EP_STALL)
 299   2          {
 300   3            return USB_STATUS_EP_STALLED;
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 6   

 301   3          }
 302   2          else
 303   2          {
 304   3            return USB_STATUS_EP_BUSY;
 305   3          }
 306   2        }
 307   1      
 308   1        DISABLE_USB_INTS;
 309   1      
 310   1        ep->buf = dat;
 311   1        ep->remaining = byteCount;
 312   1        ep->state = D_EP_RECEIVING;
 313   1        ep->misc.bits.callback = callback;
 314   1        ep->misc.bits.waitForRead = false;
 315   1      
 316   1        // If isochronous, set the buffer index to 0
 317   1      #if ((SLAB_USB_EP3OUT_USED) && (SLAB_USB_EP3OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC))
                if (epAddr == EP3OUT)
                {
                  myUsbDevice.ep3outIsoIdx = 0;
                }
              #endif
 323   1      
 324   1        ENABLE_USB_INTS;
 325   1        USB_RestoreSfrPage();
 326   1      
 327   1        return USB_STATUS_OK;
 328   1      }
 329          
 330          #if SLAB_USB_REMOTE_WAKEUP_ENABLED
              int8_t USBD_RemoteWakeup(void)
              {
                // The device must be suspended and Remote Wakeup must have been previously
                // configured with a SET_FEATURE (Remote Wakeup) command.
                if ((myUsbDevice.state != USBD_STATE_SUSPENDED) ||
                    (myUsbDevice.remoteWakeupEnabled == false))
                {
                  return USB_STATUS_ILLEGAL;
                }
              
                USB_ForceResume();
                USBD_RemoteWakeupDelay();   // Application will provide the delay between
                                            // starting and stopping the resume signal.
                USB_ClearResume();
              
                return USB_STATUS_OK;
              }
              #endif // SLAB_USB_REMOTE_WAKEUP_ENABLED
 349          
 350          #if SLAB_USB_POLLED_MODE
              void USBD_Run(void)
              {
                usbIrqHandler();
              }
              #endif // SLAB_USB_POLLED_MODE
 356          
 357          int8_t USBD_StallEp(uint8_t epAddr)
 358          {
 359   1        bool usbIntsEnabled;
 360   1      
 361   1        USB_SaveSfrPage();
 362   1      
 363   1        // Verify the endpoint address is valid and not Endpoint 0.
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 7   

 364   1        if ((epAddr == EP0) || (epAddr >= SLAB_USB_NUM_EPS_USED))
 365   1        {
 366   2          SLAB_ASSERT(false);
 367   2          return USB_STATUS_ILLEGAL;
 368   2        }
 369   1      
 370   1        DISABLE_USB_INTS;
 371   1      
 372   1        // Halt the appropriate endpoint by sending a stall and setting the endpoint
 373   1        // state to Halted (D_EP_HALT).
 374   1        switch (epAddr)
 375   1        {
 376   2      #if SLAB_USB_EP1IN_USED
 377   2          case (EP1IN):
 378   2            myUsbDevice.ep1in.state = D_EP_HALT;
 379   2            USB_SetIndex(1);
 380   2            USB_EpnInStall();
 381   2            break;
 382   2      #endif
 383   2      #if SLAB_USB_EP2IN_USED
                  case (EP2IN):
                    myUsbDevice.ep2in.state = D_EP_HALT;
                    USB_SetIndex(2);
                    USB_EpnInStall();
                    break;
              #endif
 390   2      #if SLAB_USB_EP3IN_USED
                  case (EP3IN):
                    myUsbDevice.ep3in.state = D_EP_HALT;
                    USB_SetIndex(3);
                    USB_EpnInStall();
                    break;
              #endif
 397   2      #if SLAB_USB_EP1OUT_USED
                  case (EP1OUT):
                    myUsbDevice.ep1out.state = D_EP_HALT;
                    USB_SetIndex(1);
                    USB_EpnOutStall();
                    break;
              #endif
 404   2      #if SLAB_USB_EP2OUT_USED
                  case (EP2OUT):
                    myUsbDevice.ep2out.state = D_EP_HALT;
                    USB_SetIndex(2);
                    USB_EpnOutStall();
                    break;
              #endif
 411   2      #if SLAB_USB_EP3OUT_USED
                  case (EP3OUT):
                    myUsbDevice.ep3out.state = D_EP_HALT;
                    USB_SetIndex(3);
                    USB_EpnOutStall();
                    break;
              #endif
 418   2        }
 419   1      
 420   1        ENABLE_USB_INTS;
 421   1        USB_RestoreSfrPage();
 422   1      
 423   1        return USB_STATUS_OK;
 424   1      }
 425          
 426          void USBD_Stop(void)
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 8   

 427          {
 428   1        USB_DisableInts();
 429   1        USBD_Disconnect();
 430   1        USBD_SetUsbState(USBD_STATE_NONE);
 431   1      }
 432          
 433          void USBD_Suspend(void)
 434          {
 435   1        uint8_t i;
 436   1        bool regulatorEnabled, prefetchEnabled;
 437   1      
 438   1        USB_SaveSfrPage();
 439   1      
 440   1        // If the USB_PWRSAVE_MODE_ONVBUSOFF is enabled, we can enter suspend if VBUS
 441   1        // is not present even if the USB has not detected a suspend event.
 442   1      #if ((!(SLAB_USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF)) || \
 443   1             (SLAB_USB_BUS_POWERED))
                if (USB_IsSuspended() == true)
              #else
 446   1        if ((USB_IsSuspended() == true) || (USB_IsVbusOn() == false))
 447   1      #endif
 448   1        {
 449   2          USB_SuspendTransceiver();
 450   2      
 451   2      #if SLAB_USB_FULL_SPEED
 452   2          USB_SetSuspendClock();
 453   2      #endif
 454   2      
 455   2          // Get the state of the prefetch engine enable bit and disable the prefetch
 456   2          // engine
 457   2          prefetchEnabled = USB_IsPrefetchEnabled();
 458   2          USB_DisablePrefetch();
 459   2      
 460   2          // Get the state of the internal regulator before suspending it.
 461   2          if (USB_IsRegulatorEnabled() == true)
 462   2          {
 463   3            regulatorEnabled = true;
 464   3      
 465   3      #if (SLAB_USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_FASTWAKE)
                    USB_SuspendRegulatorFastWake();
              #else
 468   3            USB_SuspendRegulator();
 469   3      
 470   3            // Wait at least 12 clock instructions before halting the internal oscillator
 471   3            for (i = 0; i < 3; i++)
 472   3            {
 473   4            }
 474   3      #endif
 475   3          }
 476   2          else
 477   2          {
 478   3            regulatorEnabled = false;
 479   3          }
 480   2      
 481   2          do
 482   2          {
 483   3            USB_SuspendOscillator();
 484   3      
 485   3            // When we arrive here, the device has waked from suspend mode.
 486   3      
 487   3      #if SLAB_USB_REMOTE_WAKEUP_ENABLED
                    // If remote wakeup is enabled, query the application if the remote
                    // wakeup event occurred. If so, exit USBD_Suspend().
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 9   

                    if (USB_IsSuspended() == true)
                    {
                      if (USBD_RemoteWakeupCb() == true)
                      {
                        break;
                      }
                    }
              #endif
 498   3      #if ((!(SLAB_USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF)) && \
 499   3             (SLAB_USB_BUS_POWERED == 0))
                    // If the USB_PWRSAVE_MODE_ONVBUSOFF mode is disabled, VBUS has been
                    // removed, so exit USBD_Suspend().
                    if (USB_IsVbusOn() == false)
                    {
                      break;
                    }
              #endif
 507   3          } while (USB_IsSuspended() == true);
 508   2      
 509   2          // Restore the internal regulator
 510   2          if (regulatorEnabled == true)
 511   2          {
 512   3            USB_UnsuspendRegulator();
 513   3          }
 514   2      
 515   2          // Restore the prefetch engine
 516   2          if (prefetchEnabled == true)
 517   2          {
 518   3            USB_EnablePrefetch();
 519   3          }
 520   2      
 521   2      #if SLAB_USB_FULL_SPEED
 522   2          // Restore the clock
 523   2          USB_SetNormalClock();
 524   2      #endif
 525   2          USB_EnableTransceiver();
 526   2        }
 527   1      
 528   1        USB_RestoreSfrPage();
 529   1      }
 530          
 531          int8_t USBD_UnStallEp(uint8_t epAddr)
 532          {
 533   1        bool usbIntsEnabled;
 534   1      
 535   1        USB_SaveSfrPage();
 536   1      
 537   1        // Verify the endpoint address is valid and not Endpoint 0.
 538   1        if ((epAddr == EP0) || (epAddr >= SLAB_USB_NUM_EPS_USED))
 539   1        {
 540   2          SLAB_ASSERT(false);
 541   2          return USB_STATUS_ILLEGAL;
 542   2        }
 543   1        else
 544   1        {
 545   2          DISABLE_USB_INTS;
 546   2      
 547   2          // End the stall condition and set the endpoint state to idle.
 548   2          switch (epAddr)
 549   2          {
 550   3      #if SLAB_USB_EP1IN_USED
 551   3            case (EP1IN):
 552   3              myUsbDevice.ep1in.state = D_EP_IDLE;
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 10  

 553   3              USB_SetIndex(1);
 554   3              USB_EpnInEndStall();
 555   3              break;
 556   3      #endif
 557   3      #if SLAB_USB_EP2IN_USED
                    case (EP2IN):
                      myUsbDevice.ep2in.state = D_EP_IDLE;
                      USB_SetIndex(2);
                      USB_EpnInEndStall();
                      break;
              #endif
 564   3      #if SLAB_USB_EP3IN_USED
                    case (EP3IN):
                      myUsbDevice.ep3in.state = D_EP_IDLE;
                      USB_SetIndex(3);
                      USB_EpnInEndStall();
                      break;
              #endif
 571   3      #if SLAB_USB_EP1OUT_USED
                    case (EP1OUT):
                      myUsbDevice.ep1out.state = D_EP_IDLE;
                      USB_SetIndex(1);
                      USB_EpnOutEndStall();
                      break;
              #endif
 578   3      #if SLAB_USB_EP2OUT_USED
                    case (EP2OUT):
                      myUsbDevice.ep2out.state = D_EP_IDLE;
                      USB_SetIndex(2);
                      USB_EpnOutEndStall();
                      break;
              #endif
 585   3      #if SLAB_USB_EP3OUT_USED
                    case (EP3OUT):
                      myUsbDevice.ep3out.state = D_EP_IDLE;
                      USB_SetIndex(3);
                      USB_EpnOutEndStall();
                      break;
              #endif
 592   3          }
 593   2      
 594   2          ENABLE_USB_INTS;
 595   2          USB_RestoreSfrPage();
 596   2        }
 597   1      
 598   1        return USB_STATUS_OK;
 599   1      }
 600          
 601          int8_t USBD_Write(uint8_t epAddr,
 602                            uint8_t *dat,
 603                            uint16_t byteCount,
 604                            bool callback)
 605          {
 606   1        bool usbIntsEnabled;
 607   1        USBD_Ep_TypeDef MEM_MODEL_SEG *ep;
 608   1      
 609   1        USB_SaveSfrPage();
 610   1      
 611   1        // Verify the endpoint address is valid.
 612   1        switch (epAddr)
 613   1        {
 614   2          case EP0:
 615   2      #if SLAB_USB_EP1IN_USED
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 11  

 616   2          case EP1IN:
 617   2      #endif
 618   2      #if SLAB_USB_EP2IN_USED
                  case EP2IN:
              #endif
 621   2      #if SLAB_USB_EP3IN_USED
                  case EP3IN:
              #endif
 624   2            break;
 625   2      #if SLAB_USB_EP1OUT_USED
                  case EP1OUT:
              #endif
 628   2      #if SLAB_USB_EP2OUT_USED
                  case EP2OUT:
              #endif
 631   2      #if SLAB_USB_EP3OUT_USED
                  case EP3OUT:
              #endif
 634   2          default:
 635   2            SLAB_ASSERT(false);
 636   2            return USB_STATUS_ILLEGAL;
 637   2        }
 638   1      
 639   1        // If the device is not configured and it is not Endpoint 0, we cannot begin
 640   1        // a transfer.
 641   1        if ((epAddr != EP0) && (myUsbDevice.state != USBD_STATE_CONFIGURED))
 642   1        {
 643   2          return USB_STATUS_DEVICE_UNCONFIGURED;
 644   2        }
 645   1      
 646   1        ep = GetEp(epAddr);
 647   1      
 648   1        // If the endpoint is not idle, we cannot start a new transfer.
 649   1        // Return the appropriate error code.
 650   1        if (ep->state != D_EP_IDLE)
 651   1        {
 652   2          if (ep->state == D_EP_STALL)
 653   2          {
 654   3            return USB_STATUS_EP_STALLED;
 655   3          }
 656   2          else
 657   2          {
 658   3            return USB_STATUS_EP_BUSY;
 659   3          }
 660   2        }
 661   1      
 662   1        DISABLE_USB_INTS;
 663   1      
 664   1        ep->buf = dat;
 665   1        ep->remaining = byteCount;
 666   1        ep->state = D_EP_TRANSMITTING;
 667   1        ep->misc.bits.callback = callback;
 668   1      
 669   1        switch (epAddr)
 670   1        {
 671   2          // For Endpoint 0, set the inPacketPending flag to true. The USB handler
 672   2          // will see this on the next SOF and begin the transfer.
 673   2          case (EP0):
 674   2            myUsbDevice.ep0.misc.bits.inPacketPending = true;
 675   2            break;
 676   2      
 677   2          // For data endpoints, we will call USB_WriteFIFO here to reduce latency
 678   2          // between the call to USBD_Write() and the first packet being sent.
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 12  

 679   2      #if SLAB_USB_EP1IN_USED
 680   2          case (EP1IN):
 681   2            USB_WriteFIFO(1,
 682   2                          (byteCount > SLAB_USB_EP1IN_MAX_PACKET_SIZE) ? SLAB_USB_EP1IN_MAX_PACKET_SIZE : byteCo
             -unt,
 683   2                          myUsbDevice.ep1in.buf,
 684   2                          true);
 685   2            break;
 686   2      #endif // SLAB_USB_EP1IN_USED
 687   2      #if SLAB_USB_EP2IN_USED
                  case (EP2IN):
                    USB_WriteFIFO(2,
                                  (byteCount > SLAB_USB_EP2IN_MAX_PACKET_SIZE) ? SLAB_USB_EP2IN_MAX_PACKET_SIZE : byteCo
             -unt,
                                  myUsbDevice.ep2in.buf,
                                  true);
                    break;
              #endif // SLAB_USB_EP2IN_USED
 695   2      #if SLAB_USB_EP3IN_USED
                  case (EP3IN):
              #if  ((SLAB_USB_EP3IN_TRANSFER_TYPE == USB_EPTYPE_BULK) || (SLAB_USB_EP3IN_TRANSFER_TYPE == USB_EPTYPE_INT
             -R))
                    USB_WriteFIFO(3,
                                  (byteCount > SLAB_USB_EP3IN_MAX_PACKET_SIZE) ? SLAB_USB_EP3IN_MAX_PACKET_SIZE : byteCo
             -unt,
                                  myUsbDevice.ep3in.buf,
                                  true);
              #elif (SLAB_USB_EP3IN_TRANSFER_TYPE == USB_EPTYPE_ISOC)
                    myUsbDevice.ep3in.misc.bits.inPacketPending = true;
                    myUsbDevice.ep3inIsoIdx = 0;
              #endif
                    break;
              #endif // SLAB_USB_EP3IN_USED
 708   2        }
 709   1      
 710   1        ENABLE_USB_INTS;
 711   1        USB_RestoreSfrPage();
 712   1      
 713   1        return USB_STATUS_OK;
 714   1      }
 715          
 716          // -----------------------------------------------------------------------------
 717          // UtilityFunctions
 718          
 719          void USBD_SetUsbState(USBD_State_TypeDef newState)
 720          {
 721   1      #if (SLAB_USB_SUPPORT_ALT_INTERFACES)
                uint8_t i;
              #endif
 724   1        USBD_State_TypeDef currentState;
 725   1      
 726   1        currentState = myUsbDevice.state;
 727   1      
 728   1        // If the device is un-configuring, disable the data endpoints and clear out
 729   1        // alternate interface settings
 730   1        if ((currentState >= USBD_STATE_SUSPENDED)
 731   1             && (newState < USBD_STATE_SUSPENDED))
 732   1        {
 733   2          USBD_AbortAllTransfers();
 734   2      
 735   2      #if (SLAB_USB_SUPPORT_ALT_INTERFACES)
                  for (i = 0; i < SLAB_USB_NUM_INTERFACES; i++)
                  {
C51 COMPILER V9.53.0.0   EFM8_USBD                                                         01/23/2016 15:52:27 PAGE 13  

                    myUsbDevice.interfaceAltSetting[i] = 0;
                  }
              #endif
 741   2        }
 742   1        if (newState == USBD_STATE_SUSPENDED)
 743   1        {
 744   2          myUsbDevice.savedState = currentState;
 745   2        }
 746   1      
 747   1        myUsbDevice.state = newState;
 748   1      
 749   1      #if SLAB_USB_STATE_CHANGE_CB
 750   1        if (currentState != newState)
 751   1        {
 752   2          USBD_DeviceStateChangeCb(currentState, newState);
 753   2        }
 754   1      #endif
 755   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    962    ----
   CONSTANT SIZE    =     89    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      24
   IDATA SIZE       =     36    ----
   BIT SIZE         =   ----      10
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
